---
title: "Ahnen Familie Niemann"
author: "Ulrike Niemann"
date: today
lang: de
format: 
  html:
    theme: minty
    include-in-header: header.html
    code-fold: true
    highlight-style: github
    toc: true
    css: styles.css
    grid:
      body-width: 1000px
execute:
  echo: false
  warning: false
# editor: visual
---

Probanden: Juliane und Ulrike Niemann


```{r setup}
# librarys laden
if (!require("tidyverse")) install.packages("tidyverse"); library(tidyverse)
if (!require("readxl")) install.packages("readxl"); library(readxl)
if (!require("leaflet")) install.packages("leaflet"); library(leaflet)
if (!require("RColorBrewer")) install.packages("RColorBrewer"); library(RColorBrewer)
if (!require("janitor")) install.packages("janitor"); library(janitor)
if (!require("scales")) install.packages("scales"); library(scales)
if (!require("knitr")) install.packages("knitr"); library(knitr)
if (!require("kableExtra")) install.packages("kableExtra"); library(kableExtra)
if (!require("ggiraph")) install.packages("ggiraph"); library(ggiraph)
if (!require("igraph")) install.packages("igraph"); library(igraph)
if (!require("treemap")) install.packages("treemap"); library(treemap)
if (!require("ggraph")) install.packages("ggraph"); library(ggraph)

source("./R/0_functions.R")
source("./R/1_DatenEinlesen.R")
source("./R/2_DatenSelektieren.R")
source("./R/3_DatenAufbereiten.R")
source("./R/4_FamilienDaten.R")
```


Bisher wurden `r nrow(data)` Personen erfasst, 
davon sind `r ZahlDirektAhnen` direkte Vorfahren.

Die eingelesene Ahnen-Datei ist vom `r LetzteAktualisierung`.

```{r}
#| fig-height: 1.2
# Vergleich Anzahl Personen und direkte Vorfahren
tab <- data |> group_by(Vorfahren) |> 
  summarise(Anzahl = n()) |> 
  mutate(Vorfahren = c("direkte Vorfahren", "weitere Personen")) |> 
  mutate(Label = str_c(Vorfahren, "\n n = ", Anzahl)) |> 
  mutate(color = c("#08519C", "grey"))
# treemap
treemap(tab,
        index="Label",
        vSize="Anzahl",
        type="color",
        vColor = "color",
        title = "",
        sortID = "size")
```


--------------------------------------------------------------------------------

## Generation - nur direkte Vorfahren

Anteil erfasster direkter Vorfahren an allen möglichen Vorfahren

```{r}
# Tabelle
dat <- computeTable(data = data |> 
                      filter(!is.na(Generation) & !str_detect(Generation, "0")), 
                    Generation) 

dat <- dat |> select(-Prozent)

dat <- dat |> 
  mutate(Vorfahren = c((2^(1:14)), sum(2^(1:14)))) |> 
  mutate(Prozent = Anzahl / Vorfahren) |> 
  mutate(Prozent = Prozent |> percent(accuracy = 0.1, decimal.mark = ","))
getTable(dat)
```


```{r}
#| fig-height: 4
# Grafik
dat <- computeTable(data = data |> filter(!is.na(Generation) & !str_detect(Generation, "1")), 
                    Generation) |> filter(row_number() <= n()-1)
g <- ggplot(dat, aes(y = Generation, x = Anzahl)) + 
  geom_bar_interactive(stat = "identity", 
                       aes(fill = "#08519C", 
                           tooltip = str_c(Generation, ": n = ", Anzahl))) +
  scale_y_discrete(limits=rev, name = "Generation / Ebene") +
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  geom_text(aes(label = Anzahl), hjust = -0.1, size = 8, size.unit = "pt") +
  scale_fill_identity(guide = "none") +
  ggtitle("Anzahl direkter Vorfahren nach Generation") +
  myTheme
#g
girafe(ggobj = g)
```

--------------------------------------------------------------------------------

## KekuleNr und Versuch eines Stammbaums

Nur zum Verständnis - KekuleNr (hier: bis 60): 

- Männer = gerade KekuleNr, Frauen die darauffolgende ungerade KekuleNr
- also: Wolfgang = 2, Renate = 3
- Kind ist damit immer: KekuleNr / 2 -> abgerundet
- Wolfgangs Eltern: KekuleNr 4+5 -> jeweils / 2 abgerundet: KekuleNr Kind (Wolfgang) = 2
- der mittlere Knoten (1) repräsentiert hier Juliane+Ulrike

```{r}
#| fig-height: 7
#| fig-width: 7
# https://r-graph-gallery.com/251-network-with-node-size-based-on-edges-number.html
# create data:
direkt <- data |> 
  filter(KekuleNr > 1 & KekuleNr <= 60) |> 
  select(KekuleNr, VORNAME, NACHNAME, Kind, Generation)

links=data.frame(
  source=as.character(direkt$KekuleNr),
  target=as.character(direkt$Kind))

# Turn it into igraph object
set.seed(2)
network <- graph_from_data_frame(d=links, directed=F) 
plot(network, layout=layout.fruchterman.reingold)
```
```{r}
#| fig-height: 6
#| fig-width: 9

# data: edge list
edges=data.frame(
  from=as.character(direkt$Kind),
  to=as.character(direkt$KekuleNr))

# We can add a second data frame with information for each node!
name <- unique(c(as.character(edges$from), as.character(edges$to)))

vertices <- data.frame(name = as.numeric(name)) |> 
  left_join(direkt |> 
  select(KekuleNr, VORNAME, NACHNAME, Generation), 
  by = join_by(name == KekuleNr))
vertices[1, 2] <- "Ulrike + Juliane"  
vertices[1, 3] <- "NIEMANN" 

mygraph <- graph_from_data_frame( edges, vertices=vertices )

ggraph(mygraph, layout = 'dendrogram', circular = FALSE) +
  geom_edge_link() +
  geom_node_text(aes(label = name, vjust = 1.5)) +
  geom_node_point(aes(color = Generation)) +
  theme_void()
```



```{r}
#| fig-height: 6
#| fig-width: 9
ggraph(mygraph, layout = 'dendrogram', circular = FALSE) +
  geom_edge_link() +
  geom_node_text(aes(label = str_c(VORNAME, " ", NACHNAME), 
                     angle = -90, hjust = -0.1), size = 2) +
  geom_node_point() +
  theme_void() +
  expand_limits(x = c(-0, 0), y = c(-1.7, 1.7))
```


--------------------------------------------------------------------------------

## Anzahl Kinder - Anzahl der direkten Vorfahren 


```{r}
#| fig-height: 3

dataDIREKT <- data |> filter(Vorfahren == "Direkt")
# Tabelle
computeTable(dataDIREKT, AnzahlKinder) |> getTable()
# Grafik
# keine Angabe auch raus: -2
dat <- computeTable(dataDIREKT, AnzahlKinder) |> filter(row_number() <= n()-2)
########################################################
 g <- ggplot(dat, aes(y = AnzahlKinder, x = Anzahl)) + 
  geom_bar_interactive(stat = "identity", 
                       aes(fill = "#08519C", 
                           tooltip = str_c(AnzahlKinder, ": n = ", Anzahl))) +
  scale_y_discrete(limits=rev, name = "Anzahl Kinder") +
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  geom_text(aes(label = Anzahl), hjust = -0.1, size = 8, size.unit = "pt") +
  scale_fill_identity(guide = "none") +
  ggtitle("Anzahl direkte Vorfahren nach Anzahl ihrer Kinder") +
  myTheme
girafe(ggobj = g)
```

### Mittlere Anzahl Kinder - alle direkten Vorfahren

```{r}
#| fig-height: 3
tab <- dataDIREKT |> 
  group_by(Generation) |> 
  summarise(`Mittelwert Anzahl Kinder` = round(mean(AnzahlKinder, na.rm = TRUE), 1),
            Anzahl = n()) |> 
  add_row(Generation = "Alle direkten Vorfahren",
          `Mittelwert Anzahl Kinder` = round(mean(data$AnzahlKinder, na.rm = TRUE), 1), 
          Anzahl = nrow(data |> filter(Vorfahren == "Direkt")))
getTable(tab)
#
g <- ggplot(tab, aes(y = Generation, x = `Mittelwert Anzahl Kinder`)) + 
  geom_bar_interactive(stat = "identity", width = 0.5,
                       aes(fill = "#08519C", 
                           tooltip = str_c("Generation : ", Generation, 
                                           " - Mittelwert Anzahl Kinder: ", 
                                           `Mittelwert Anzahl Kinder`, " Kinder (n = ",
                                           Anzahl, ")"))) +
  geom_text(aes(label = `Mittelwert Anzahl Kinder`), 
            hjust = -0.1, size = 8, size.unit = "pt") +
  scale_y_discrete(limits=rev, name = "Generation / Ebene") +
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  scale_fill_identity(guide = "none") +
  ggtitle("Mittlere Anzahl Kinder, direkte Vorfahren nach Generation") +
  myTheme
girafe(ggobj = g)
```

## Anzahl Kinder - Anzahl der direkten Vorfahren-PAARE 


```{r}
#| fig-height: 3

# Tabelle
computeTable(dataDIREKT |> select(Paar, AnzahlKinder) |> unique(), 
             AnzahlKinder) |> getTable()
# Grafik
# keine Angabe auch raus: -2
dat <- computeTable(dataDIREKT |> select(Paar, AnzahlKinder) |> unique(), AnzahlKinder) |>
  filter(row_number() <= n()-2)
########################################################
 g <- ggplot(dat, aes(y = AnzahlKinder, x = Anzahl)) + 
  geom_bar_interactive(stat = "identity", 
                       aes(fill = "#08519C", 
                           tooltip = str_c(AnzahlKinder, ": n = ", Anzahl))) +
  scale_y_discrete(limits=rev, name = "Anzahl Kinder") +
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  geom_text(aes(label = Anzahl), hjust = -0.1, size = 8, size.unit = "pt") +
  scale_fill_identity(guide = "none") +
  ggtitle("Anzahl direkte Vorfahren nach Anzahl ihrer Kinder") +
  myTheme
girafe(ggobj = g)
```

### Mittlere Anzahl Kinder - alle direkten Vorfahren-PAARE

```{r}
#| fig-height: 3
tab <- dataDIREKT |> select(Paar, AnzahlKinder, Generation) |> unique() |> 
  group_by(Generation) |> 
  summarise(`Mittelwert Anzahl Kinder` = round(mean(AnzahlKinder, na.rm = TRUE), 1),
            Anzahl = n()) |> 
  add_row(Generation = "Alle direkten Vorfahren",
          `Mittelwert Anzahl Kinder` = round(mean(data$AnzahlKinder, na.rm = TRUE), 1), 
          Anzahl = nrow(data |> filter(Vorfahren == "Direkt")))
getTable(tab)
#
g <- ggplot(tab, aes(y = Generation, x = `Mittelwert Anzahl Kinder`)) + 
  geom_bar_interactive(stat = "identity", width = 0.5,
                       aes(fill = "#08519C", 
                           tooltip = str_c("Generation : ", Generation, 
                                           " - Mittelwert Anzahl Kinder: ", 
                                           `Mittelwert Anzahl Kinder`, " Kinder (n = ",
                                           Anzahl, ")"))) +
  geom_text(aes(label = `Mittelwert Anzahl Kinder`), 
            hjust = -0.1, size = 8, size.unit = "pt") +
  scale_y_discrete(limits=rev, name = "Generation / Ebene") +
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  scale_fill_identity(guide = "none") +
  ggtitle("Mittlere Anzahl Kinder, direkte Vorfahren nach Generation") +
  myTheme
girafe(ggobj = g)
```
--------------------------------------------------------------------------------


## Geburt / Jahrhundert - Alle

```{r}
#| fig-height: 2
computeTable(data, Geburt) |> getTable()
# keine Angabe auch raus: -2
dat <- computeTable(data, Geburt) |> filter(row_number() <= n()-2)
g <- ggplot(dat, aes(y = Geburt, x = Anzahl)) + 
  geom_bar_interactive(stat = "identity", 
                       aes(fill = "grey", 
                           tooltip = str_c(Geburt, ": n = ", Anzahl))) +
  scale_y_discrete(limits=rev, name = "Jahrhundert Geburt") +
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  geom_text(aes(label = Anzahl), hjust = -0.1, size = 8, size.unit = "pt") +
  scale_fill_identity(guide = "none") +
  ggtitle("Anzahl Vorfahren nach Geburtsjahrhundert") +
  myTheme
#g
girafe(ggobj = g)
```

## Generation und Geburtsjahrhundert - nur Direktvorfahren

```{r}
#| fig-height: 4
# Generation + Geburt
g <- ggplot(data = data[!is.na(data$Generation), ], aes(y = Generation)) + 
  geom_bar_interactive(aes(fill = Geburt, 
                           tooltip = str_c("Anzahl = ", 
                                           after_stat(count)))) +
  scale_y_discrete(limits=rev, name = "Generation / Ebene") +
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  geom_text(aes(label = ..count..), 
            stat = "count", hjust = -0.1, size = 8, size.unit = "pt") +
  scale_fill_manual(values = 
                      c(brewer.pal(length(levels(data$Geburt)), "Blues")[-1], "#aaaaaa")) +
  ggtitle("Anzahl Direkt-Vorfahren nach Generation und Geburtsjahrhundert") +
  myTheme
girafe(ggobj = g)
```

--------------------------------------------------------------------------------

## Erreichtes Alter

### Alter: Nur Direkt-Vorfahren

```{r}
#| fig-height: 3
# Altersgruppen - Direkt-Vorfahren
computeTable(data |> filter(Vorfahren == "Direkt"), Altersgruppe) |> 
  getTable()
# keine Angabe auch raus: -2
dat <- computeTable(data |> filter(Vorfahren == "Direkt"), Altersgruppe) |> 
  filter(row_number() <= n()-2)

g <- ggplot(dat, aes(y = Altersgruppe, x = Anzahl)) + 
  geom_bar_interactive(stat = "identity", 
                       aes(fill = "#08519C", 
                           tooltip = str_c(Altersgruppe, ": n = ", Anzahl))) +
  scale_y_discrete(limits=rev, name = "Altersgruppe") +
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  #coord_flip() +
  geom_text(aes(label = Anzahl), hjust = -0.1, size = 8, size.unit = "pt") +
  scale_fill_identity(guide = "none") +
  ggtitle("Anzahl Vorfahren nach Alter - Direktvorfahren") +
  myTheme
girafe(ggobj = g)
```

### Alter: Alle Vorfahren

```{r}
#| fig-height: 3
# Altersgruppen - alle
computeTable(data, Altersgruppe) |> getTable()
# keine Angabe auch raus: -2
dat <- computeTable(data, Altersgruppe) |> filter(row_number() <= n()-2)

g <- ggplot(dat, aes(y = Altersgruppe, x = Anzahl)) + 
  geom_bar_interactive(stat = "identity", 
                       aes(fill = "grey", 
                           tooltip = str_c(Altersgruppe, ": n = ", Anzahl))) +
  scale_y_discrete(limits=rev, name = "Altersgruppe") +
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  #coord_flip() +
  geom_text(aes(label = Anzahl), hjust = -0.1, size = 8, size.unit = "pt") +
  scale_fill_identity(guide = "none") +
  ggtitle("Anzahl Vorfahren nach Alter") +
  myTheme
girafe(ggobj = g)
```

### Mittleres Alter nach Jahrhunderten - Alle

```{r}
#| fig-height: 2
tab <- data |> 
  filter(!is.na(Alter)) |> 
  group_by(Geburt) |> 
  summarise(`Mittelwert Alter` = round(mean(Alter), 1),
            Anzahl = n()) |> 
  add_row(Geburt = "Alle Vorfahren",
          `Mittelwert Alter` = round(mean(data$Alter, na.rm = TRUE), 1), 
          Anzahl = nrow(data |> filter(!is.na(Alter))))
getTable(tab)
#
g <- ggplot(tab, aes(y = Geburt, x = `Mittelwert Alter`)) + 
  geom_bar_interactive(stat = "identity", width = 0.5,
           aes(fill = "grey", 
               tooltip = str_c("Geburt: ", Geburt, 
                               " - Mittelwert erreichtes Alter: ", 
                               `Mittelwert Alter`, " Jahre (n = ",
                               Anzahl, ")"))) +
  geom_text(aes(label = `Mittelwert Alter`), 
            hjust = -0.1, size = 8, size.unit = "pt") +
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  scale_fill_identity(guide = "none") +
  ggtitle("Mittleres Alter bei Tod, Alle und nach Jahrhundert der Geburt") +
  myTheme
girafe(ggobj = g)
```

--------------------------------------------------------------------------------


# Karten

Den Geodaten fügen wir ein leichtes "Rauschen" hinzu, damit Dublikate (Vorfahren mit gleichen Geodaten)
beim Reinscrollen trotzdem sichtbar werden.

```{r}
# Geo Dublikate ?
# duplicated(data[,c("lat1", "lon1")]) |> table()
# leichtes Rauschen
data <- data |> 
  mutate(lat1x = jitter(lat1, factor = 1),
         lon1x = jitter(lon1, factor = 1),
         lat2x = jitter(lat2, factor = 1),
         lon2x = jitter(lon2, factor = 1) )

```


Beim Pop-Up sind die Namen hinterlegt.

### Version 1

Direkt- vs. weitere Vorfahren.

Wiso ist da ein schwedischer noName ??

```{r}

col <- c("#08519C", "grey")
cols <- colorFactor(palette = col, data$Vorfahren)
# Karte V1
leaflet(data |> filter(!is.na(lon1))) |>
  addTiles() |>
  addProviderTiles("OpenStreetMap.DE",
                   options = providerTileOptions(noWrap = TRUE)) |>
  # setView(lng = mean(data$lon1, na.rm = TRUE), 
  #         lat = mean(data$lat1, na.rm = TRUE), zoom = 8) |> 
    addCircleMarkers(~lon1x, ~lat1x, radius = 4,
                   fillColor = col, fillOpacity = 0.7,
                   weight = 1,
                   popup = ~str_c(VORNAME, " ", NACHNAME)) |>
  addLegend('bottomright', pal = cols, values = unique(data$Vorfahren),
            title = 'Vorfahren',
            opacity = 1)

```

### Version 2

Geburtsorte nach Jahrhundert der Geburt.

Es gibt außerdem viele verschiedene Hintergrundkarten, da ist noch das optimale zu wählen...

siehe z.B. 
http://leaflet-extras.github.io/leaflet-providers/preview/


```{r}
col <- c(brewer.pal(length(levels(data$Geburt)), "Blues")[-1], "#aaaaaa")
lev <- levels(data$Geburt)
cols <- colorFactor(palette = col, data$Geburt)

l2 <- leaflet(data |> filter(!is.na(lon1))) |> 
  addTiles() |> 
  addProviderTiles(providers$Esri.NatGeoWorldMap) |> 
  # setView(lng = mean(data$lon1, na.rm = TRUE),
  #         lat = mean(data$lat1, na.rm = TRUE), zoom = 8) |>
  addCircleMarkers(~lon1x, ~lat1x, radius = 4,
                   fillColor  = ~cols(Geburt), fillOpacity = 0.7,
                   weight = 1,
                   popup = ~str_c(VORNAME, " ", NACHNAME)) |>
  addLegend('bottomright', pal = cols, values = lev,
            title = 'Geburt',
            opacity = 1)
l2
```



... hier kommt bald noch mehr ...
