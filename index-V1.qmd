---
title: "Ahnen Familie Niemann"
author: "Ulrike Niemann"
date: today
lang: de
format: 
  html:
    theme: minty
    code-fold: true
    highlight-style: github
    toc: true
execute:
  echo: true
  warning: false
# editor: visual
---

Für den interessierten Wolfgang inklusive Code.

## Daten einlesen und aufbereiten

### Bibliotheken laden

```{r setup}
# librarys laden
if (!require("tidyverse")) install.packages("tidyverse"); library(tidyverse)
if (!require("readxl")) install.packages("readxl"); library(readxl)
if (!require("leaflet")) install.packages("leaflet"); library(leaflet)
if (!require("RColorBrewer")) install.packages("RColorBrewer"); library(RColorBrewer)
if (!require("janitor")) install.packages("janitor"); library(janitor)
if (!require("scales")) install.packages("scales"); library(scales)
if (!require("knitr")) install.packages("knitr"); library(knitr)
if (!require("kableExtra")) install.packages("kableExtra"); library(kableExtra)
if (!require("ggiraph")) install.packages("ggiraph"); library(ggiraph)
```

### Daten einlesen

Datenquelle kann hier ggf. jederzeit ersetzt werden, sollte im selben Stil bleiben.

```{r}
# Daten einlesen
data <- read_xlsx("./data/Ulrike 17.Jan 2024.xlsx", skip = 1)
```

Wir haben hier `r nrow(data)` Zeilen eingelesen.

### Daten aufbereiten

Die Geodaten werden bereinigt, für Geburt und Tod das Jahrhundert extrahiert.

```{r}
# aufbereiten
data <- data |> 
  mutate(Generation = str_split(GENERATION, " ", simplify = TRUE)[, 1] |> unlist(),
         lat1 = `GEO1 BREITE` |> parse_number(),
         lon1 = `GEO1 LÄNGE` |> parse_number(),
         lat2 = `GEO2 BREITE` |> parse_number(),
         lon2 = `GEO2 LÄNGE` |> parse_number(),
         Geburt = (data$`GEB JAHR`/100) |> floor(),
         Tod = (data$`TOD JAHR`/100) |> floor()) |> 
  mutate(Geburt = factor(str_c(Geburt, "00 - ", Geburt, "99")) |> 
           fct_explicit_na("(keine Angabe)")) |> 
  mutate(Tod = factor(str_c(Tod, "00 - ", Tod, "99")) |> 
           fct_explicit_na("(keine Angabe)")) |> 
  mutate(Alter = `TOD JAHR` - `GEB JAHR`)
```


# Deskriptive Analysen

Funktionen für Tabellenerstellung und -darstellung:

```{r}
# functions für hübsche Tabelle
computeTable <- function(var) {
  data |> 
    group_by({{var}}) |> 
    summarise(Anzahl = n()) |> 
    mutate(Prozent = (Anzahl/sum(Anzahl))) |> 
    adorn_totals("row") |> 
    mutate(Prozent = Prozent |> percent(accuracy = 0.1, decimal.mark = ",")) |> 
    mutate({{var}} := factor({{var}}) |> fct_inorder())
}
getTable <- function(tab) {
  tab |> 
    kable(align = c("l", "c", "c")) |> 
    kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
                  full_width = F) |> 
    row_spec(dim(tab)[1], bold = T)
} 
```

## Generation

Sollen 1a und 1b zusammen gezählt werden?

```{r}
computeTable(Generation) |> getTable()
#
dat <- computeTable(Generation) |> filter(row_number() <= n()-1)
g <- ggplot(dat, aes(y = Generation, x = Anzahl)) + 
  geom_bar_interactive(stat = "identity", 
                       aes(fill = "#08519C", 
                           tooltip = str_c(Generation, ": n = ", Anzahl))) +
  scale_y_discrete(limits=rev, name = "Generation / Ebene") +
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  geom_text(aes(label = Anzahl), hjust = -0.5) +
  scale_fill_identity(guide = "none") +
  ggtitle("Anzahl Vorfahren nach Generation") +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 12),
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    panel.grid = element_blank(),
    plot.title = element_text(size=16, face="bold", 
                              margin = margin(0, 0, 30, 0))
  )
#g
girafe(ggobj = g)
```

## Geburt / Jahrhundert

```{r}
computeTable(Geburt) |> getTable()
dat <- computeTable(Geburt) |> filter(row_number() <= n()-1)
g <- ggplot(dat, aes(y = Geburt, x = Anzahl)) + 
  geom_bar_interactive(stat = "identity", 
                       aes(fill = "#08519C", 
                           tooltip = str_c(Geburt, ": n = ", Anzahl))) +
  scale_y_discrete(limits=rev, name = "Jahrhundert Geburt") +
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  geom_text(aes(label = Anzahl), hjust = -0.5) +
  scale_fill_identity(guide = "none") +
  ggtitle("Anzahl Vorfahren nach Geburtsjahrhundert") +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 12),
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    panel.grid = element_blank(),
    plot.title = element_text(size=16, face="bold", 
                              margin = margin(0, 0, 30, 0))
  )
#g
girafe(ggobj = g)
```

## Generation und Geburtsjahrhundert

```{r}
# Generation + Geburt
g <- ggplot(data, aes(y = Generation)) + 
  geom_bar_interactive(aes(fill = Geburt, 
                           tooltip = str_c("Anzahl = ", 
                                           after_stat(count)))) +
  scale_y_discrete(limits=rev, name = "Generation / Ebene") +
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  geom_text(aes(label = ..count..), stat = "count", hjust = -0.5) +
  scale_fill_manual(values = 
                      c(brewer.pal(length(levels(data$Geburt)), "Blues")[-1], "#aaaaaa")) +
  ggtitle("Anzahl Vorfahren nach Generation und Geburtsjahrhundert") +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 12),
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    panel.grid = element_blank(),
    plot.title = element_text(size=16, face="bold", 
                             margin = margin(0, 0, 30, 0))
  )
girafe(ggobj = g)
```

## Erreichtes Alter (bei Tod)

Alter und Altersgruppen berechnen:

```{r}
data <- data |> 
  mutate(Alter = `TOD JAHR` - `GEB JAHR`) |> 
  mutate(Altersgruppe = case_when(
    Alter < 40 ~ "unter 40 Jahre",
    Alter >=40 & Alter < 50 ~ "40 bis unter 50 Jahre",
    Alter >=50 & Alter < 60 ~ "50 bis unter 60 Jahre",  
    Alter >=60 & Alter < 70 ~ "60 bis unter 70 Jahre",
    Alter >=70 & Alter < 80 ~ "70 bis unter 80 Jahre",
    Alter >=80 ~ "80 Jahre und älter",
    is.na(Alter) ~ "keine Angabe"
  ) |> fct_reorder(Alter))
```

## Altersgruppen

```{r}
computeTable(Altersgruppe) |> getTable()
dat <- computeTable(Altersgruppe) |> filter(row_number() <= n()-1)

g <- ggplot(dat, aes(y = Altersgruppe, x = Anzahl)) + 
  geom_bar_interactive(stat = "identity", 
                       aes(fill = "#08519C", 
                           tooltip = str_c(Altersgruppe, ": n = ", Anzahl))) +
  scale_y_discrete(limits=rev, name = "Altersgruppe") +
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  #coord_flip() +
  geom_text(aes(label = Anzahl), hjust = -0.5) +
  scale_fill_identity(guide = "none") +
  ggtitle("Anzahl Vorfahren nach Alter bei Tod") +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 12),
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    panel.grid = element_blank(),
    plot.title = element_text(size=16, face="bold", 
                              margin = margin(0, 0, 30, 0))
  )
girafe(ggobj = g)
```

### Mittleres Alter nach Jahrhunderten

```{r}
tab <- data |> 
  filter(!is.na(Alter)) |> 
  group_by(Geburt) |> 
  summarise(`Mittelwert Alter` = round(mean(Alter), 1),
            Anzahl = n()) |> 
  add_row(Geburt = "Alle Vorfahren",
          `Mittelwert Alter` = round(mean(data$Alter, na.rm = TRUE), 1), 
          Anzahl = nrow(data |> filter(!is.na(Alter))))
getTable(tab)
#
g <- ggplot(tab, aes(y = Geburt, x = `Mittelwert Alter`)) + 
  geom_bar_interactive(stat = "identity", width = 0.5,
           aes(fill = "#08519C", 
               tooltip = str_c("Geburt: ", Geburt, 
                               " - Mittelwert erreichtes Alter: ", 
                               `Mittelwert Alter`, " Jahre (n = ",
                               Anzahl, ")"))) +
  geom_text(aes(label = `Mittelwert Alter`), hjust = -0.1) +
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  scale_fill_identity(guide = "none") +
  ggtitle("Mittleres Alter bei Tod, Alle und nach Jahrhundert der Geburt") +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 12),
    panel.grid = element_blank(),
    plot.title = element_text(size=16, face="bold", 
                              margin = margin(0, 0, 30, 0))
  )
girafe(ggobj = g)
```




# Karten

Erst mal füge ich den Geodaten ein leichtes "Rauschen" hinzu, damit Dublikate (Vorfahren mit gleichen Geodaten)
beim Reinscrollen trotzdem sichtbar werden.

```{r}
# Geo Dublikate ?
# duplicated(data[,c("lat1", "lon1")]) |> table()
# leichtes Rauschen
data <- data |> 
  mutate(lat1x = jitter(lat1, factor = 1),
         lon1x = jitter(lon1, factor = 1),
         lat2x = jitter(lat2, factor = 1),
         lon2x = jitter(lon2, factor = 1) )

```

Wie können wir die Karte optimal darstellen?

Man kann in die Karten raus- und reinscrollen.

Beim Pop-Up habe ich die Namen hinterlegt.

### Version 1

Geburts- und Sterbeorte mit verschiedenen Icons.

Wiso ist da ein schwedischer noName ??

```{r}
# Karte V1: mit icons
leaflet(data) |>
  addTiles() |>
  addProviderTiles("OpenStreetMap.DE",
                   options = providerTileOptions(noWrap = TRUE)) |>
  # setView(lng = mean(data$lon1, na.rm = TRUE), 
  #         lat = mean(data$lat1, na.rm = TRUE), zoom = 8) |> 
  addMarkers(~lon1x, ~lat1x,
             icon = makeIcon("./data/birth.png", 18, 18),
             popup = ~str_c(VORNAME, " ", NAME)) |>
  addMarkers(~lon2x, ~lat2x,
             icon = makeIcon("./data/death.png", 18, 18),
             label = ~str_c(VORNAME, " ", NAME))

```

### Version 2

Nur Geburtsorte, dafür eingefärbt nach Jahrhundert der Geburt.

Ein bisschen reingescrollt wegen dem schwedischen Ausreißer-Ahnen.

Es gibt außerdem viele verschiedene Hintergrundkarten, da ist noch das optimale zu wählen...

siehe z.B. 
http://leaflet-extras.github.io/leaflet-providers/preview/


```{r}
col <- c(brewer.pal(length(levels(data$Geburt)), "Blues")[-1], "#aaaaaa")
lev <- levels(data$Geburt)
cols <- colorFactor(palette = col, data$Geburt)

l2 <- leaflet(data |> filter(!is.na(lon1))) |> 
  addTiles() |> 
  addProviderTiles(providers$Esri.NatGeoWorldMap) |> 
  setView(lng = mean(data$lon1, na.rm = TRUE),
          lat = mean(data$lat1, na.rm = TRUE), zoom = 8) |>
  addCircleMarkers(~lon1x, ~lat1x, radius = 4,
                   fillColor  = ~cols(Geburt), fillOpacity = 0.7,
                   weight = 1,
                   popup = ~str_c(VORNAME, " ", NAME)) |>
  addLegend('bottomright', pal = cols, values = lev,
            title = 'Geburt',
            opacity = 1)
l2
```



... hier kommt bald noch mehr ...
